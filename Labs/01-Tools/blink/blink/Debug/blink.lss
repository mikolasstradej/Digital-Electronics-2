
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b01  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000409  00000000  00000000  000014bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000396  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000510  00000000  00000000  00001c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00002192  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 */
int main(void)
{
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000 (DDRB = data direction register -- udává jestli bude vstupní nebo výstupní) (ledka PB5 bude v registru B proto ddrB a pin 5 -- výstupní pin má 1 a vstupní má 0)
    DDRB = DDRB | (1<<LED_GREEN); // (veznem DDBR v aktuálním stavu a | je funkce OR ) (<< je binární posunutí doleva TZN že 1 je v 8bit 00000001 a pøi posunutí o 5 pozic(PB5) to vypadá 00100000) (poté pøi fci OR mezi 00000000 a 00100000 nám zmìní hodnotu 5. pinu na 1 (tzn výstup))
  80:	25 9a       	sbi	0x04, 5	; 4
    // Set pin LOW in Data Register (LED off) (kod aby ledka nesvítila na zaèátku)
    // PORTB = PORTB and 1101 1111
    PORTB = PORTB & ~(1<<PB5); //(& je logický souèin a ~ je negace)
  82:	2d 98       	cbi	0x05, 5	; 5
        // Pause several miliseconds
        _delay_ms(SHORT_DELAY);

        // Invert LED in Data Register (když chceme ledkou blikat)
        // PORTB = PORTB xor 0010 0000
        PORTB = PORTB ^ (1<<LED_GREEN); // (^ je fce XOR)
  84:	80 e2       	ldi	r24, 0x20	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	36 e1       	ldi	r19, 0x16	; 22
  8a:	91 e1       	ldi	r25, 0x11	; 17
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0xc>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x16>
  96:	00 00       	nop
  98:	95 b1       	in	r25, 0x05	; 5
  9a:	98 27       	eor	r25, r24
  9c:	95 b9       	out	0x05, r25	; 5
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	34 e4       	ldi	r19, 0x44	; 68
  a2:	93 e3       	ldi	r25, 0x33	; 51
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
  ae:	00 00       	nop
		_delay_ms(SHORT_DELAY*3);
		PORTB = PORTB ^ (1<<LED_GREEN);
  b0:	95 b1       	in	r25, 0x05	; 5
  b2:	98 27       	eor	r25, r24
  b4:	95 b9       	out	0x05, r25	; 5
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	36 e1       	ldi	r19, 0x16	; 22
  ba:	91 e1       	ldi	r25, 0x11	; 17
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
  c8:	95 b1       	in	r25, 0x05	; 5
  ca:	98 27       	eor	r25, r24
  cc:	95 b9       	out	0x05, r25	; 5
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	36 e1       	ldi	r19, 0x16	; 22
  d2:	91 e1       	ldi	r25, 0x11	; 17
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	30 40       	sbci	r19, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x54>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x5e>
  de:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
  e0:	95 b1       	in	r25, 0x05	; 5
  e2:	98 27       	eor	r25, r24
  e4:	95 b9       	out	0x05, r25	; 5
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	36 e1       	ldi	r19, 0x16	; 22
  ea:	91 e1       	ldi	r25, 0x11	; 17
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	30 40       	sbci	r19, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x6c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x76>
  f6:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
  f8:	95 b1       	in	r25, 0x05	; 5
  fa:	98 27       	eor	r25, r24
  fc:	95 b9       	out	0x05, r25	; 5
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	36 e1       	ldi	r19, 0x16	; 22
 102:	91 e1       	ldi	r25, 0x11	; 17
 104:	21 50       	subi	r18, 0x01	; 1
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x84>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x8e>
 10e:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
 110:	95 b1       	in	r25, 0x05	; 5
 112:	98 27       	eor	r25, r24
 114:	95 b9       	out	0x05, r25	; 5
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	32 e7       	ldi	r19, 0x72	; 114
 11a:	95 e5       	ldi	r25, 0x55	; 85
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	30 40       	sbci	r19, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x9c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0xa6>
 126:	00 00       	nop
		_delay_ms(SHORT_DELAY*5); // D
		
		PORTB = PORTB ^ (1<<LED_GREEN);
 128:	95 b1       	in	r25, 0x05	; 5
 12a:	98 27       	eor	r25, r24
 12c:	95 b9       	out	0x05, r25	; 5
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	36 e1       	ldi	r19, 0x16	; 22
 132:	91 e1       	ldi	r25, 0x11	; 17
 134:	21 50       	subi	r18, 0x01	; 1
 136:	30 40       	sbci	r19, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0xb4>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0xbe>
 13e:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
 140:	95 b1       	in	r25, 0x05	; 5
 142:	98 27       	eor	r25, r24
 144:	95 b9       	out	0x05, r25	; 5
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	32 e7       	ldi	r19, 0x72	; 114
 14a:	95 e5       	ldi	r25, 0x55	; 85
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	30 40       	sbci	r19, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0xcc>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0xd6>
 156:	00 00       	nop
		_delay_ms(SHORT_DELAY*5); // E
		
		PORTB = PORTB ^ (1<<LED_GREEN);
 158:	95 b1       	in	r25, 0x05	; 5
 15a:	98 27       	eor	r25, r24
 15c:	95 b9       	out	0x05, r25	; 5
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	36 e1       	ldi	r19, 0x16	; 22
 162:	91 e1       	ldi	r25, 0x11	; 17
 164:	21 50       	subi	r18, 0x01	; 1
 166:	30 40       	sbci	r19, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0xe4>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0xee>
 16e:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
 170:	95 b1       	in	r25, 0x05	; 5
 172:	98 27       	eor	r25, r24
 174:	95 b9       	out	0x05, r25	; 5
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	36 e1       	ldi	r19, 0x16	; 22
 17a:	91 e1       	ldi	r25, 0x11	; 17
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	30 40       	sbci	r19, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0xfc>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x106>
 186:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
 188:	95 b1       	in	r25, 0x05	; 5
 18a:	98 27       	eor	r25, r24
 18c:	95 b9       	out	0x05, r25	; 5
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	36 e1       	ldi	r19, 0x16	; 22
 192:	91 e1       	ldi	r25, 0x11	; 17
 194:	21 50       	subi	r18, 0x01	; 1
 196:	30 40       	sbci	r19, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x114>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x11e>
 19e:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
 1a0:	95 b1       	in	r25, 0x05	; 5
 1a2:	98 27       	eor	r25, r24
 1a4:	95 b9       	out	0x05, r25	; 5
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	36 e1       	ldi	r19, 0x16	; 22
 1aa:	91 e1       	ldi	r25, 0x11	; 17
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	30 40       	sbci	r19, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x12c>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x136>
 1b6:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
 1b8:	95 b1       	in	r25, 0x05	; 5
 1ba:	98 27       	eor	r25, r24
 1bc:	95 b9       	out	0x05, r25	; 5
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	34 e4       	ldi	r19, 0x44	; 68
 1c2:	93 e3       	ldi	r25, 0x33	; 51
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	30 40       	sbci	r19, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x144>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x14e>
 1ce:	00 00       	nop
		_delay_ms(SHORT_DELAY*3);
		PORTB = PORTB ^ (1<<LED_GREEN);
 1d0:	95 b1       	in	r25, 0x05	; 5
 1d2:	98 27       	eor	r25, r24
 1d4:	95 b9       	out	0x05, r25	; 5
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	36 e1       	ldi	r19, 0x16	; 22
 1da:	91 e1       	ldi	r25, 0x11	; 17
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	30 40       	sbci	r19, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x15c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x166>
 1e6:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
 1e8:	95 b1       	in	r25, 0x05	; 5
 1ea:	98 27       	eor	r25, r24
 1ec:	95 b9       	out	0x05, r25	; 5
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	34 e4       	ldi	r19, 0x44	; 68
 1f2:	93 e3       	ldi	r25, 0x33	; 51
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	30 40       	sbci	r19, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0x174>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x17e>
 1fe:	00 00       	nop
		_delay_ms(SHORT_DELAY*3);
		PORTB = PORTB ^ (1<<LED_GREEN);
 200:	95 b1       	in	r25, 0x05	; 5
 202:	98 27       	eor	r25, r24
 204:	95 b9       	out	0x05, r25	; 5
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	36 e1       	ldi	r19, 0x16	; 22
 20a:	91 e1       	ldi	r25, 0x11	; 17
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	30 40       	sbci	r19, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x18c>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x196>
 216:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
 218:	95 b1       	in	r25, 0x05	; 5
 21a:	98 27       	eor	r25, r24
 21c:	95 b9       	out	0x05, r25	; 5
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	34 e4       	ldi	r19, 0x44	; 68
 222:	93 e3       	ldi	r25, 0x33	; 51
 224:	21 50       	subi	r18, 0x01	; 1
 226:	30 40       	sbci	r19, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x1a4>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x1ae>
 22e:	00 00       	nop
		_delay_ms(SHORT_DELAY*3);
		PORTB = PORTB ^ (1<<LED_GREEN);
 230:	95 b1       	in	r25, 0x05	; 5
 232:	98 27       	eor	r25, r24
 234:	95 b9       	out	0x05, r25	; 5
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	32 e7       	ldi	r19, 0x72	; 114
 23a:	95 e5       	ldi	r25, 0x55	; 85
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	30 40       	sbci	r19, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x1bc>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x1c6>
 246:	00 00       	nop
 248:	1e cf       	rjmp	.-452    	; 0x86 <main+0x6>

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
